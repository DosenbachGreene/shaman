classdef SimulatedDataProvider < DataProvider
    % Provide data generated by the simulate.m script.
    %
    % See the documentation for the abstract class DataProvider for
    % details.
    properties (SetAccess=protected, GetAccess=public)
        n_participants % number of participants
        n_voxels % number of voxels
    end
    properties (SetAccess=private, GetAccess=public)
        dir % directory containing simulated data
    end
    properties (Access = private)
        subids % list of participant ids, e.g. sub1234.mat -> 1234
        index % next participant to be returned by nextData()
    end
    methods
        function this = SimulatedDataProvider(dir)
            % Constructor, creates a new SimulatedDataProvider that gets
            % its simulated data from the sub*.mat files in dir.
        
            % Search for simulated participant data files in the given
            % directory.
            this.dir = dir;
            listing = feval('dir', [this.dir '/sub*.mat']);
            
            % Strip the integer 1234 from each file name sub1234.mat and
            % treat this as the participant id.
            this.subids = arrayfun(@(x)(uint16(str2double(x.name(4:7)))), listing);
            
            this.n_participants = length(this.subids);
            this.n_voxels = 0; % initially we don't know the # of voxels
            this.index = 1; % initialize to first participant
        end
        
        function data = dataAt(this, index)
            % See documentation for DataProvider::dataAt()
            
            % Make sure index is in range.
            assert(index <= this.n_participants);
            
            % Load data file for the simulated participant.
            data_ = load([this.dir '/sub' num2str(index, '%0.4u') '.mat']);
            
            % Populate a Data structure.
            data = Data;
            data.fmri = data_.data;
            data.motion = data_.fd;
            data.tbl = table;
            data.tbl.id = index;
            data.tbl.trait = data_.trait;

            % Remember how many voxels are in the data.
            if this.n_voxels == 0
                this.n_voxels = size(data.fmri, 2);
            else
                assert(this.n_voxels == size(data.fmri, 2), 'Data have inconsistent number of voxels.');
            end
        end
       
        function [data, index] = nextData(this)
            % See documentation for DataProvider::nextData()       
            assert(this.index <= this.n_participants); % sanity check
            index = this.index; % return the index for this participant
            if this.index == 0
                data = []; % no more participants, return empty data
            else
                data = this.dataAt(index); % delegate to dataAt()
                
                % Increment the index counter, or set to zero if there is
                % no more data.
                if this.index == this.n_participants
                    this.index = 0;
                else
                    this.index = this.index + 1;
                end
            end
        end
        
        function moreData = isMoreData(this)
            % See documentation for DataProvider::isMoreData()
            moreData = this.index ~= 0;
        end
        
        function reset(this)
            % See documentation for DataProvider::reset()
            this.index = 1;
        end
        
        function n_participants = size_hint_participants(this)
            % See documentation for DataProvider::size_hint_participants()
            n_participants = this.n_participants;
        end
        function n_voxels = size_voxels(this)
            % See documentation for DataProvider::size_hint_voxels()
            n_voxels = this.n_voxels;
        end
    end
end